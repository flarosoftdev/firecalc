import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


logging.info("Loading 'math' module...")
import math
logging.info("Loading 'random' module...")
import random
logging.info("Loading 're' module...")
import re
logging.info("Loading 'cmath' module...")
import cmath
logging.info("Loading 'datetime' module...")
import datetime
logging.info("Loading 'sympy' module...")
import sympy as sp
logging.info("Loading 'matplotlib.pyplot' module...")
import matplotlib.pyplot as plt
logging.info("Loading 'numpy' module...")
import numpy as np
logging.info("Loading 'telebot' module...")
import telebot
logging.info("Loading 'types' from 'telebot' module...")
from telebot import types
logging.info("Loading 'requests' module...")
import requests
logging.info("Loading 'time' module...")
import time
logging.info("Loading 'os' module...")
import os
logging.info("Loading 'sys' module...")
import sys
logging.info("Loading 'AI21Client' from 'ai21' module...")
from ai21 import AI21Client
logging.info("Loading 'ChatMessage', 'ResponseFormat' from 'ai21.models.chat' module...")
from ai21.models.chat import ChatMessage, ResponseFormat

TOKEN = "YOUR_BOT_TOKEN"
bot = telebot.TeleBot(TOKEN)

messages = {
    "en": {
        "start": """üëãüèª Hello!

*I am a modern smart calculator*, designed to solve a wide range of mathematical problems.

My system is capable of *performing both elementary and complex analytical calculations*, providing *accurate* and *reasonable* solutions. üßÆ

*Enter a mathematical expression or equation, and I will immediately perform the necessary calculations, providing you with a reliable solution!* üòâ

üë• If you need a smart calculator in your group, just [add me](tg://resolve?domain=FireCalcTG_bot&startgroup=new), and I will be ready to work in no time! (Reply to my message with your expression, and I will solve it)""",
        "random_result": "Random number: *{}*",
        "currency": "Currency conversion",
        "temperature": "Temperature conversion",
        "result": "Result: *{}*",
        "error": "Error! üòû",
        "solve": "Solving equation: *{}*",
        "plot": "Graph plot generated: *{}*",
        "unknown_command": "Unknown command or format!",
        "error_invalid_expression": "Error: Invalid expression!",
        "error_invalid_currency": "Error: Invalid currency!",
        "error_invalid_temperature": "Error: Invalid temperature conversion!",
        "error_unknown_function": "Error: Unknown function!",
        "help": """*Available commands*:

1. `/start` - Start the bot and select a language.
2. `/help` - Show this help message.
3. `solve <equation>` - Solve a mathematical equation. Example: `solve x^2 - 5 * x + 6 = 0`
4. `plot <function>, <x_min>, <x_max>` - Plot a function on a given interval. Example: `plot x**3,-14,134` (sign ^ = **)
5. `random <min>, <max>` - Generate a random number between min and max. Example: `random 1, 100`
6. `convert_currency <amount> <from_currency> <to_currency>` - Convert currencies. Example: `convert_currency 100 USD EUR`. Please note: this function does not work yet, but the developer is already fixing this bug.
7. `kg_to_lb <kg>` - Convert kilograms to pounds. Example: `kg_to_lb(50)`
8. `lb_to_kg <pounds>` - Convert pounds to kilograms. Example: `lb_to_kg(110)`
9. `c_to_f <c>` - Convert Celsius to Fahrenheit. Example: `c_to_f(25)`
10. `f_to_c <f>` - Convert Fahrenheit to Celsius. Example: `f_to_c(77)`
11. `c_to_k <c>` - Convert Celsius to Kelvin. Example: `c_to_k(25)`
12. `k_to_c <k>` - Convert Kelvin to Celsius. Example: `k_to_c(298)`
13. `decide <problem>` - Solve a math word problem. Example: `decide Vanya and Petya together have 20 candies. Vanya has 4 more candies than Petya. How many candies does each of them have?`

*Note:* Use simple mathematical expressions such as `2 + 3 * 5` or `10 / 2` for calculations.

*Full documentation on how to use the bot*: https://telegra.ph/FireCalc--your-personal-math-assistant-in-Telegram-03-17

[Terms of Use](https://telegra.ph/FireCalc-Terms-of-Use-03-21)
""",
        "cleared": "*Cleared!* üßπ",
        "about": """*About the Bot and Its Developer*

*FireCalc* is designed to help users solve a wide range of tasks ‚Äî *from simple mathematical calculations to generating random numbers, plotting graphs, and many other functions*. With an intuitive interface and quick response, it will become your reliable tool for effective interaction.

The bot supports several languages, including Russian and English. *Whether you need to solve a simple problem or perform more complex calculations, this bot is ready to help*.

*About the Developer*

This bot was created and is supported by *Flarosoft* ‚Äî an independent developer who is passionate about programming and strives to create useful tools for others. Flarosoft's main goal is to make everyday tasks easier and more efficient for users around the world.

As an open source developer, Flarosoft strives to contribute to the tech community by creating accessible, customizable, and reliable software. If you enjoy using this bot, please feel free to *leave feedback* (@flarosoft) to help improve future versions.""",
"thinking": "I'm thinking...",
"decide_please": "Please enter the task after the 'decide' command."
    },
    "ru": {
        "start": """üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

*–Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é —Å–æ–±–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä*, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

–ú–æ—è —Å–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–∞ *–≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ, —Ç–∞–∫ –∏ —Å–ª–æ–∂–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è*, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è *—Ç–æ—á–Ω—ã–µ* –∏ *–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ* —Ä–µ—à–µ–Ω–∏—è. üßÆ

*–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –∏ —è –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ–¥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –≤–∞–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!* üòâ

üë• –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ, –ø—Ä–æ—Å—Ç–æ [–¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è](tg://resolve?domain=FireCalcTG_bot&startgroup=new), –∏ —è —Å—Ä–∞–∑—É –±—É–¥—É –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! (–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –µ–≥–æ —Ä–µ—à—É).

üì¢ *–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏*: @flarosoftdev
""",
        "random_result": "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: *{}*",
        "currency": "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç",
        "temperature": "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        "result": "–†–µ–∑—É–ª—å—Ç–∞—Ç: *{}*",
        "error": "–û—à–∏–±–∫–∞! üòû",
        "solve": "–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: *{}*",
        "plot": "–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω: *{}*",
        "unknown_command": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç!",
        "error_invalid_expression": "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ!",
        "error_invalid_currency": "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞!",
        "error_invalid_temperature": "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã!",
        "error_unknown_function": "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è!",
        "help": """
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:

1. `/start` - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.
2. `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
3. `solve <—É—Ä–∞–≤–Ω–µ–Ω–∏–µ>` - –†–µ—à–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: `solve x^2 - 5 * x + 6 = 0`
4. `plot <—Ñ—É–Ω–∫—Ü–∏—è>, <x_min>, <x_max>` - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ. –ü—Ä–∏–º–µ—Ä: `plot x**3,-14,134`
5. `random <min>, <max>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É `min` –∏ `max`. –ü—Ä–∏–º–µ—Ä: `random 1, 100`
6. `convert_currency <—Å—É–º–º–∞> <–∏–∑_–≤–∞–ª—é—Ç–∞> <–≤_–≤–∞–ª—é—Ç–∞>` - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç. –ü—Ä–∏–º–µ—Ä: `convert_currency 100 USD EUR`. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É.
7. `kg_to_lb <–∫–≥>` - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∏–ª–æ–≥—Ä–∞–º–º—ã –≤ —Ñ—É–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä: `kg_to_lb(50)`
8. `lb_to_kg <—Ñ—É–Ω—Ç—ã>` - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω—Ç—ã –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã. –ü—Ä–∏–º–µ—Ä: `lb_to_kg(110)`
9. `c_to_f <c>` - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¶–µ–ª—å—Å–∏–π –≤ –§–∞—Ä–µ–Ω–≥–µ–π—Ç. –ü—Ä–∏–º–µ—Ä: `c_to_f(25)`
10. `f_to_c <f>` -  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –§–∞—Ä–µ–Ω–≥–µ–π—Ç –≤ –¶–µ–ª—å—Å–∏–π. –ü—Ä–∏–º–µ—Ä: `f_to_c(77)`
11. `c_to_k <c>` - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¶–µ–ª—å—Å–∏–π –≤ –ö–µ–ª—å–≤–∏–Ω. –ü—Ä–∏–º–µ—Ä: `c_to_k(25)`
12. `k_to_c <k>` -  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ö–µ–ª—å–≤–∏–Ω –≤ –¶–µ–ª—å—Å–∏–π. –ü—Ä–∏–º–µ—Ä: `k_to_c(298)`
13. `decide <–∑–∞–¥–∞—á–∞>` - –†–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É. –ü—Ä–∏–º–µ—Ä: `decide —É –í–∞–Ω–∏ –∏ –ü–µ—Ç–∏ –≤–º–µ—Å—Ç–µ 20 –∫–æ–Ω—Ñ–µ—Ç. –£ –í–∞–Ω–∏ –Ω–∞ 4 –∫–æ–Ω—Ñ–µ—Ç—ã –±–æ–ª—å—à–µ, —á–µ–º —É –ü–µ—Ç–∏. –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —É –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö?`

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ*: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, `2 + 3 * 5` –∏–ª–∏ `10 / 2` –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

*–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*: https://telegra.ph/FireCalc--vash-lichnyj-matematicheskij-pomoshchnik-v-Telegram-03-17

‚ñ∂Ô∏è *–í–∏–¥–µ–æ –Ω–∞ YouTbue —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*: https://youtu.be/VkXxSuK5zVQ

[–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](https://telegra.ph/Usloviya-ispolzovaniya-FireCalc-03-20)
    """, "cleared": "*–û—á–∏—â–µ–Ω–æ!* üßπ",
        "about": """*–û –±–æ—Ç–µ –∏ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ*

*FireCalc* —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–µ—à–∞—Ç—å —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á ‚Äî *–æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π*. –° –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –±—ã—Å—Ç—Ä—ã–º –æ—Ç–∫–ª–∏–∫–æ–º, –æ–Ω —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤, –≤–∫–ª—é—á–∞—è —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. *–ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Ä–µ—à–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, —ç—Ç–æ—Ç –±–æ—Ç –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å*.

*–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ*

–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è *Flarosoft* ‚Äî –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, —É–≤–ª–µ—á—ë–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç—Ä–µ–º—è—â–∏–º—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å Flarosoft ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.

–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, Flarosoft —Å—Ç—Ä–µ–º–∏—Ç—Å—è –≤–Ω–µ—Å—Ç–∏ –≤–∫–ª–∞–¥ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —Å–æ–∑–¥–∞–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ–µ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å *–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã* (@flarosoft), —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –±—É–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏.""",
"thinking": "–î—É–º–∞—é...",
"decide_please": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã 'decide'."
    },
    "de": {
        "start": """üëãüèª Hallo!

*Ich bin ein moderner smarter Rechner*, der entwickelt wurde, um eine breite Palette mathematischer Probleme zu l√∂sen.

Mein System ist in der Lage, *sowohl elementare als auch komplexe analytische Berechnungen* durchzuf√ºhren und *genaue* und *vern√ºnftige* L√∂sungen bereitzustellen. üßÆ

*Geben Sie einen mathematischen Ausdruck oder eine Gleichung ein, und ich werde sofort die notwendigen Berechnungen durchf√ºhren und Ihnen eine zuverl√§ssige L√∂sung bieten!* üòâ

üë• Wenn Sie einen smarten Rechner in Ihrer Gruppe ben√∂tigen, f√ºgen Sie mich einfach [hinzu](tg://resolve?domain=FireCalcTG_bot&startgroup=new), und ich werde in k√ºrzester Zeit einsatzbereit sein! (Antworten Sie auf meine Nachricht mit Ihrem Ausdruck, und ich werde ihn l√∂sen)""",
        "random_result": "Zufallszahl: *{}*",
        "currency": "W√§hrungsumrechnung",
        "temperature": "Temperaturumrechnung",
        "result": "Ergebnis: *{}*",
        "error": "Fehler! üòû",
        "solve": "Gleichung l√∂sen: *{}*",
        "plot": "Graph erzeugt: *{}*",
        "unknown_command": "Unbekannter Befehl oder Format!",
        "error_invalid_expression": "Fehler: Ung√ºltiger Ausdruck!",
        "error_invalid_currency": "Fehler: Ung√ºltige W√§hrung!",
        "error_invalid_temperature": "Fehler: Ung√ºltige Temperaturumrechnung!",
        "error_unknown_function": "Fehler: Unbekannte Funktion!",
        "help": """*Verf√ºgbare Befehle*:

1. `/start` - Starten Sie den Bot und w√§hlen Sie eine Sprache.
2. `/help` - Zeigen Sie diese Hilfemeldung an.
3. `solve <Gleichung>` - L√∂sen Sie eine mathematische Gleichung. Beispiel: `solve x^2 - 5 * x + 6 = 0`
4. `plot <Funktion>, <x_min>, <x_max>` - Zeichnen Sie eine Funktion in einem gegebenen Intervall. Beispiel: `plot x**3,-14,134` (Zeichen ^ = **)
5. `random <min>, <max>` - Erzeugen Sie eine Zufallszahl zwischen min und max. Beispiel: `random 1, 100`
6. `convert_currency <Betrag> <von_W√§hrung> <zu_W√§hrung>` - W√§hrungsumrechnung. Beispiel: `convert_currency 100 USD EUR`. Bitte beachten Sie: Diese Funktion funktioniert noch nicht, aber der Entwickler behebt diesen Fehler bereits.
7. `kg_to_lb <kg>` - Kilogramm in Pfund umrechnen. Beispiel: `kg_to_lb(50)`
8. `lb_to_kg <Pfund>` - Pfund in Kilogramm umrechnen. Beispiel: `lb_to_kg(110)`
9. `c_to_f <c>` - Celsius in Fahrenheit umrechnen. Beispiel: `c_to_f(25)`
10. `f_to_c <f>` - Fahrenheit in Celsius umrechnen. Beispiel: `f_to_c(77)`
11. `c_to_k <c>` - Celsius in Kelvin umrechnen. Beispiel: `c_to_k(25)`
12. `k_to_c <k>` - Kelvin in Celsius umrechnen. Beispiel: `k_to_c(298)`
13. `decide <Problem>` ‚Äì L√∂sen Sie ein mathematisches Textproblem. Beispiel: `decide dass Vanya und Petya zusammen 20 Bonbons haben. Vanya hat 4 Bonbons mehr als Petya. Wie viele Bonbons hat jeder von ihnen?`

*Hinweis*: Verwenden Sie einfache mathematische Ausdr√ºcke wie `2 + 3 * 5` oder `10 / 2` f√ºr Berechnungen.

*Vollst√§ndige Dokumentation zur Verwendung des Bots (Englisch)*: https://telegra.ph/FireCalc--your-personal-math-assistant-in-Telegram-03-17

[Nutzungsbedingungen](https://telegra.ph/FireCalc-Terms-of-Use-03-21)
""",
        "cleared": "*Gekl√§rt!* üßπ",
        "about": """*√úber den Bot und seinen Entwickler*

*FireCalc* wurde entwickelt, um Benutzern zu helfen, eine Vielzahl von Aufgaben zu l√∂sen ‚Äî *von einfachen mathematischen Berechnungen bis hin zu Zufallszahlen, Graphen und vielen anderen Funktionen*. Mit einer benutzerfreundlichen Oberfl√§che und schneller Reaktionszeit wird es Ihr zuverl√§ssiges Werkzeug f√ºr effektive Interaktion.

Der Bot unterst√ºtzt mehrere Sprachen, darunter Russisch und Englisch. *Egal, ob Sie ein einfaches Problem l√∂sen oder komplexe Berechnungen durchf√ºhren m√∂chten, dieser Bot ist bereit zu helfen*.

*√úber den Entwickler*

Dieser Bot wurde von *Flarosoft* erstellt und unterst√ºtzt ‚Äî einem unabh√§ngigen Entwickler, der leidenschaftlich gerne programmiert und danach strebt, n√ºtzliche Werkzeuge f√ºr andere zu schaffen. Das Hauptziel von Flarosoft ist es, allt√§gliche Aufgaben f√ºr Benutzer weltweit einfacher und effizienter zu machen.

Als Open-Source-Entwickler strebt Flarosoft danach, der Tech-Community durch die Schaffung zug√§nglicher, anpassbarer und zuverl√§ssiger Software beizutragen. Wenn Ihnen dieser Bot gef√§llt, hinterlassen Sie bitte *Feedback* (@flarosoft), um k√ºnftige Versionen zu verbessern.""",
"thinking": "Ich denke...",
"decide_please": "Bitte geben Sie die Aufgabe nach dem Befehl 'decide' ein."
    },
    "fr": {
        "start": """üëãüèª Bonjour!

*Je suis une calculatrice moderne et intelligente*, con√ßue pour r√©soudre un large √©ventail de probl√®mes math√©matiques.

Mon syst√®me est capable de *r√©aliser des calculs √©l√©mentaires et analytiques complexes*, offrant des solutions *pr√©cises* et *raisonn√©es*. üßÆ

*Entrez une expression ou une √©quation math√©matique, et je r√©aliserai imm√©diatement les calculs n√©cessaires, en vous fournissant une solution fiable!* üòâ

üë• Si vous avez besoin d'une calculatrice intelligente dans votre groupe, ajoutez-moi simplement [ici](tg://resolve?domain=FireCalcTG_bot&startgroup=new), et je serai pr√™t √† travailler en un rien de temps! (R√©pondez √† mon message avec votre expression, et je la r√©soudrai)""",
        "random_result": "Nombre al√©atoire : *{}*",
        "currency": "Conversion de devises",
        "temperature": "Conversion de temp√©rature",
        "result": "R√©sultat : *{}*",
        "error": "Erreur! üòû",
        "solve": "R√©solution de l'√©quation : *{}*",
        "plot": "Graphique g√©n√©r√© : *{}*",
        "unknown_command": "Commande ou format inconnu!",
        "error_invalid_expression": "Erreur : Expression invalide!",
        "error_invalid_currency": "Erreur : Devise invalide!",
        "error_invalid_temperature": "Erreur : Conversion de temp√©rature invalide!",
        "error_unknown_function": "Erreur : Fonction inconnue!",
        "help": """*Commandes disponibles* :

1. `/start` - D√©marrer le bot et choisir la langue.
2. `/help` - Afficher ce message d'aide.
3. `solve <√©quation>` - R√©soudre une √©quation math√©matique. Exemple : `solve x^2 - 5 * x + 6 = 0`
4. `plot <fonction>, <x_min>, <x_max>` - Tracer une fonction sur un intervalle donn√©. Exemple : `plot x**3,-14,134` (symbole ^ = **)
5. `random <min>, <max>` - G√©n√©rer un nombre al√©atoire entre min et max. Exemple : `random 1, 100`
6. `convert_currency <montant> <devise_√†_partir> <devise_vers>` - Conversion de devises. Exemple : `convert_currency 100 USD EUR`. Remarque : cette fonction ne fonctionne pas encore, mais le d√©veloppeur corrige d√©j√† cette erreur.
7. `kg_to_lb <kg>` - Convertir les kilogrammes en livres. Exemple : `kg_to_lb(50)`
8. `lb_to_kg <livres>` - Convertir les livres en kilogrammes. Exemple : `lb_to_kg(110)`
9. `c_to_f <c>` - Convertir les Celsius en Fahrenheit. Exemple : `c_to_f(25)`
10. `f_to_c <f>` - Convertir les Fahrenheit en Celsius. Exemple : `f_to_c(77)`
11. `c_to_k <c>` - Convertir les Celsius en Kelvin. Exemple : `c_to_k(25)`
12. `k_to_c <k>` - Convertir les Kelvin en Celsius. Exemple : `k_to_c(298)`
13. `decide <problem>` - R√©soudre un probl√®me math√©matique textuel. Exemple: `decide que Vanya et Petya ont ensemble 20 bonbons. Vanya a 4 bonbons de plus que Petya. Combien de bonbons chacun d'eux a-t-il`?

*Note*: Utilisez des expressions math√©matiques simples comme `2 + 3 * 5` ou `10 / 2` pour les calculs.

*Documentation compl√®te sur l'utilisation du bot (anglais)*: https://telegra.ph/FireCalc--your-personal-math-assistant-in-Telegram-03-17

[Conditions d'utilisation](https://telegra.ph/FireCalc-Terms-of-Use-03-21)
""",
        "cleared": "*Effac√©!* üßπ",
        "about": """*√Ä propos du bot et de son d√©veloppeur*

*FireCalc* est con√ßu pour aider les utilisateurs √† r√©soudre une large gamme de t√¢ches ‚Äî *des calculs math√©matiques simples √† la g√©n√©ration de nombres al√©atoires, la cr√©ation de graphiques et bien plus encore*. Avec une interface intuitive et des r√©ponses rapides, il deviendra un outil fiable pour une interaction efficace.

Le bot prend en charge plusieurs langues, y compris le russe et l'anglais. *Que vous ayez besoin de r√©soudre une t√¢che simple ou d'effectuer des calculs plus complexes, ce bot est pr√™t √† vous aider*.

*√Ä propos du d√©veloppeur*

Ce bot a √©t√© cr√©√© et est maintenu par *Flarosoft* ‚Äî un d√©veloppeur ind√©pendant passionn√© par la programmation et qui s'efforce de cr√©er des outils utiles pour les autres. L'objectif principal de Flarosoft est de rendre les t√¢ches quotidiennes plus faciles et plus efficaces pour les utilisateurs du monde entier.

En tant que d√©veloppeur open-source, Flarosoft cherche √† contribuer √† la communaut√© technologique en cr√©ant des logiciels accessibles, personnalisables et fiables. Si vous aimez utiliser ce bot, n'h√©sitez pas √† *laisser des commentaires* (@flarosoft) pour aider √† am√©liorer les versions futures.""",
"thinking": "Je pense...",
"decide_please": "Veuillez saisir la t√¢che apr√®s la commande 'decide'."
    },
    "es": {
        "start": """üëãüèª ¬°Hola!

*Soy una calculadora inteligente y moderna*, dise√±ada para resolver una amplia gama de problemas matem√°ticos.

Mi sistema es capaz de *realizar c√°lculos elementales y complejos de an√°lisis*, ofreciendo soluciones *precisas* y *razonadas*. üßÆ

*¬°Introduce una expresi√≥n matem√°tica o una ecuaci√≥n y realizar√© de inmediato los c√°lculos necesarios para proporcionarte una soluci√≥n confiable!* üòâ

üë• Si necesitas una calculadora inteligente en tu grupo, solo [agr√©game](tg://resolve?domain=FireCalcTG_bot&startgroup=new), ¬°y estar√© listo para trabajar en poco tiempo! (Responde a mi mensaje con tu expresi√≥n, ¬°y la resolver√©!)""",
        "random_result": "N√∫mero aleatorio: *{}*",
        "currency": "Conversi√≥n de divisas",
        "temperature": "Conversi√≥n de temperatura",
        "result": "Resultado: *{}*",
        "error": "¬°Error! üòû",
        "solve": "Resolviendo la ecuaci√≥n: *{}*",
        "plot": "Gr√°fico generado: *{}*",
        "unknown_command": "¬°Comando o formato desconocido!",
        "error_invalid_expression": "¬°Error: Expresi√≥n no v√°lida!",
        "error_invalid_currency": "¬°Error: Divisa no v√°lida!",
        "error_invalid_temperature": "¬°Error: Conversi√≥n de temperatura no v√°lida!",
        "error_unknown_function": "¬°Error: Funci√≥n desconocida!",
        "help": """*Comandos disponibles*:

1. `/start` - Iniciar el bot y seleccionar un idioma.
2. `/help` - Mostrar este mensaje de ayuda.
3. `solve <ecuaci√≥n>` - Resolver una ecuaci√≥n matem√°tica. Ejemplo: `solve x^2 - 5 * x + 6 = 0`
4. `plot <funci√≥n>, <x_min>, <x_max>` - Graficar una funci√≥n en un intervalo dado. Ejemplo: `plot x**3,-14,134` (s√≠mbolo ^ = **)
5. `random <min>, <max>` - Generar un n√∫mero aleatorio entre min y max. Ejemplo: `random 1, 100`
6. `convert_currency <cantidad> <de_moneda> <a_moneda>` - Conversi√≥n de divisas. Ejemplo: `convert_currency 100 USD EUR`. Nota: esta funci√≥n a√∫n no funciona, pero el desarrollador ya est√° corrigiendo este error.
7. `kg_to_lb <kg>` - Convertir kilogramos a libras. Ejemplo: `kg_to_lb(50)`
8. `lb_to_kg <libras>` - Convertir libras a kilogramos. Ejemplo: `lb_to_kg(110)`
9. `c_to_f <c>` - Convertir Celsius a Fahrenheit. Ejemplo: `c_to_f(25)`
10. `f_to_c <f>` - Convertir Fahrenheit a Celsius. Ejemplo: `f_to_c(77)`
11. `c_to_k <c>` - Convertir Celsius a Kelvin. Ejemplo: `c_to_k(25)`
12. `k_to_c <k>` - Convertir Kelvin a Celsius. Ejemplo: `k_to_c(298)`
13. `decide <problema>` - Resolver un problema matem√°tico de texto. Ejemplo: `decide que Vanya y Petya juntos tienen 20 caramelos. Vanya tiene 4 dulces m√°s que Petya. ¬øCu√°ntos dulces tiene cada uno de ellos?`

*Nota*: Usa expresiones matem√°ticas simples como `2 + 3 * 5` o `10 / 2` para los c√°lculos.

*Documentaci√≥n completa sobre c√≥mo utilizar el bot (en ingl√©s)*: https://telegra.ph/FireCalc--your-personal-math-assistant-in-Telegram-03-17

[Condiciones de uso](https://telegra.ph/FireCalc-Terms-of-Use-03-21)
""",
        "cleared": "*¬°Borrado!* üßπ",
        "about": """*Sobre el bot y su desarrollador*

*FireCalc* est√° dise√±ado para ayudar a los usuarios a resolver una amplia gama de tareas, desde *c√°lculos matem√°ticos simples hasta la generaci√≥n de n√∫meros aleatorios, gr√°ficos y mucho m√°s*. Con una interfaz f√°cil de usar y respuestas r√°pidas, se convertir√° en una herramienta confiable para una interacci√≥n eficiente.

El bot admite varios idiomas, incluidos ruso e ingl√©s. *Ya sea que necesites resolver una tarea simple o realizar c√°lculos m√°s complejos, este bot est√° listo para ayudarte*.

*Sobre el desarrollador*

Este bot fue creado y es mantenido por *Flarosoft* ‚Äî un desarrollador independiente apasionado por la programaci√≥n y que trabaja para crear herramientas √∫tiles para otros. El objetivo principal de Flarosoft es hacer que las tareas cotidianas sean m√°s f√°ciles y eficientes para los usuarios de todo el mundo.

Como desarrollador de c√≥digo abierto, Flarosoft busca contribuir a la comunidad tecnol√≥gica creando software accesible, personalizable y confiable. Si te gusta usar este bot, no dudes en *dejar comentarios* (@flarosoft) para ayudar a mejorar las versiones futuras.""",
"thinking": "Estoy pensando...",
"decide_please": "Por favor, introduzca la tarea despu√©s del comando 'decide'."
    },
}

def setlang(lang, id):
    with open(f"{id}_lang.txt", "w") as file:
        file.write(lang)

def readlang(id):
    try:
        with open(f"{id}_lang.txt", "r") as file:
            return file.read()
    except FileNotFoundError:
        return "en"

def bannedmsg(id):
    bot.send_message(
    id,
    "üö´ *Access permanently denied*\n\n"
    "You have been *banned for using offensive language*.\n"
    "If you believe this action was taken in error, you may contact the developer for clarification: @flarosoft",
    parse_mode="Markdown"
)

def kg_to_lb(kg): return kg * 2.20462
def lb_to_kg(lb): return lb / 2.20462
def c_to_f(c): return c * 9/5 + 32
def f_to_c(f): return (f - 32) * 5/9
def c_to_k(c): return c + 273.15
def k_to_c(k): return k - 273.15

def now(): return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def solve(equation):
    try:
        if isinstance(equation, str):
            equation = equation.replace("^", "**")
            equation = equation.replace("=", "-(") + ")"
            x = sp.Symbol("x")
            result = sp.solve(sp.sympify(equation), x)

        elif isinstance(equation, list):
            variables = set(re.findall(r"[a-zA-Z]+", " ".join(equation)))
            symbols = {var: sp.Symbol(var) for var in variables}
            eqs = [sp.sympify(eq.replace("=", "-(") + ")", locals=symbols) for eq in equation]
            result = sp.solve(eqs, list(symbols.values()))

        else:
            result = "Equation error"

        logging.info(f"Equation solution: {equation} -> {result}")
        return result
    except Exception as e:
        logging.error(f"Equation solving error: {e}")
        return messages[readlang(id)]["error_invalid_expression"]

def plot(func, x_min, x_max):
    try:
        x = np.linspace(x_min, x_max, 1000)
        y = [eval(func, {"x": val, "math": math}) for val in x]

        plt.plot(x, y)
        plt.title(f"Graph of {func}")
        plt.xlabel("x")
        plt.ylabel("f(x)")
        plt.grid(True)
        path = "plot.png"
        plt.savefig(path)
        plt.close()

        logging.info(f"Graph plot generated: {func}")
        return path
    except Exception as e:
        logging.error(f"Graph plotting error: {e}")
        return messages[readlang(id)]["error_unknown_function"]

allowed_names = {
    **{name: getattr(math, name) for name in dir(math) if not name.startswith("_")},
    **{name: getattr(cmath, name) for name in dir(cmath) if not name.startswith("_")},
    "random": lambda x, y: random.uniform(x, y),
    "kg_to_lb": kg_to_lb, "lb_to_kg": lb_to_kg,
    "c_to_f": c_to_f, "f_to_c": f_to_c, "c_to_k": c_to_k, "k_to_c": k_to_c,
    "now": now, "solve": solve, "plot": plot
}

def secure_eval(expression, user_id):
    try:
        if not re.match(r"^[\d\.\+\-\*/\%\(\)\s\^,a-zA-Z_=\[\]]+$", expression):
            return messages[readlang(user_id)]["error_invalid_expression"]
        expression = expression.replace("^", "**")

        if expression in ["+", "-", "/", "*", "%", "^"]:
            return messages[readlang(user_id)]["error_invalid_expression"]

        result = eval(expression, {"__builtins__": None}, allowed_names)

        logging.info(f"Expression result: {expression} -> {result}")
        return result
    except Exception as e:
        logging.error(f"Error in computation: {e}")
        return messages[readlang(user_id)]["error_invalid_expression"]

def get_username(message):
    """Get user's username if available"""
    username = message.from_user.username
    return f"@{username}" if username else ""

@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_id = message.chat.id
    username = get_username(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üá¨üáß English")
    item2 = types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    item3 = types.KeyboardButton("üá©üá™ Deutsch")
    item4 = types.KeyboardButton("üá´üá∑ Fran√ßais")
    item5 = types.KeyboardButton("üá™üá∏ Espa√±ol")
    if not os.path.isfile(f"{user_id}_firecalc_banned.txt"):
        markup.add(item1, item2, item3, item4, item5)

    logging.info(f"User {user_id} {username} started interaction with bot")

    if not os.path.isfile(f"{user_id}_firecalc_banned.txt"):
        bot.send_message(
        user_id,
        "üá¨üáß Please choose your language / üá∑üá∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá©üá™ Bitte w√§hlen Sie eine Sprache aus /üá´üá∑ Veuillez s√©lectionner une langue / üá™üá∏ Por favor seleccione un idioma:",
        reply_markup=markup
    )
    else:
        bannedmsg(user_id)


def setlang(lang, id):
    with open(f"{id}_lang.txt", "w") as file:
        file.write(lang)

def readlang(id):
    try:
        with open(f"{id}_lang.txt", "r") as file:
            return file.read()
    except FileNotFoundError:
        return "en"  # Default to English if no language file exists

@bot.message_handler(func=lambda message: message.text in ["üá¨üáß English", "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá©üá™ Deutsch", "üá´üá∑ Fran√ßais", "üá™üá∏ Espa√±ol"])
def set_language(message):
    user_id = message.chat.id
    username = get_username(message)

    if message.text == "üá¨üáß English":
        setlang("en", user_id)
    elif message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        setlang("ru", user_id)
    elif message.text == "üá©üá™ Deutsch":
        setlang("de", user_id)
    elif message.text == "üá´üá∑ Fran√ßais":
        setlang("fr", user_id)
    elif message.text == "üá™üá∏ Espa√±ol":
        setlang("es", user_id)

    logging.info(f"User {user_id} {username} selected language: {readlang(user_id)}")

    markup = types.ReplyKeyboardRemove()
    invite_link = "tg://resolve?domain=FireCalcTG_bot&startgroup=new"
    bot.send_message(
        user_id,
        messages[readlang(user_id)]["start"],
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['clear'])
def clear_chat(message):
    chat_id = message.chat.id
    message_id = message.message_id
    username = get_username()

    logging.info(f"User {chat_id} {username} started clearing the chat")

    while message_id > 0:
        try:
            bot.delete_message(chat_id, message_id)
            message_id -= 1
        except Exception:
            break

    confirmation = bot.send_message(chat_id, messages[readlang(chat_id)]["cleared"], parse_mode="Markdown")
    time.sleep(2.5)
    bot.delete_message(chat_id, confirmation.message_id)

@bot.message_handler(commands=["help"])
def help(message):
    user_id = message.chat.id
    username = get_username(message)
    if not os.path.isfile(f"{user_id}_firecalc_banned.txt"):
        logging.info(f"User {user_id} {username} opened the help menu")
        bot.send_message(user_id, messages[readlang(user_id)]["help"], parse_mode="Markdown")
    else:
        bannedmsg(user_id)

@bot.message_handler(commands=["about"])
def about(message):
    user_id = message.chat.id
    username = get_username(message)
    if os.path.isfile(f"{user_id}_firecalc_banned.txt") == False:
      logging.info(f"User {id} {username} opened the 'about' menu")
      bot.send_message(user_id, messages[readlang(user_id)]["about"], parse_mode="Markdown")
    else:
        bannedmsg(user_id)


def check_message(text, id, un):
    # Bad words, that the bot bans
    words = ['–¥–∞—É–Ω', '–ø–∏–¥–æ—Ä', '—á—É—à–ø–∞–Ω', '—Å—É–∫–∞', '–µ–±–∞', '—ë–±–∞', '–µ–±', '—ë–±', '–∑–∞–¥—Ä–æ—Ç', '—á—É—à–ø–∞–Ω', '–¥—Ä–æ—á–∏—Ç—å', '–±–ª—è—Ö–∞–º—É—Ö–∞', '–±–ª—è—Ö–∞-–º—É—Ö–∞', '–±–ª—è—Ö–∞', '–ø–∏–∑–¥—é–ª–∫–∞', '–ø–∏–∑–¥—é–ª—å–∫–∞', '–ø–∏–∑–¥—é–ª–∏', '–ø–∏–∑–¥—é–ª–µ–π', '–ø–∏–∑–¥—é–ª—è–º–∏', '–ø–∏–∑–¥–æ—á–∫–∞', '–±–ª—è—Ö–∞ –º—É—Ö–∞', '—Ö—É–π', '—Ö–µ—Ä', '–±–ª—è', '–±–ª—è—Ç—å', '–±–ª—è–¥—å', '–æ—Ö—É–µ—Ç—å', '–∞—Ö—É–µ—Ç—å', '–≥–æ–≤–Ω–æ', '–ø–∏–¥–æ—Ä–∞—Å', '–µ–±–ª–∞–Ω', '–µ–±–∞—Ç—å', '–∞—Ö—É–µ–ª', '–æ—Ö—É–µ–ª', '–∞—Ö—É–µ–ª–∞', '–æ—Ö—É–µ–ª–∞', '–æ—Ö—É–µ–ª–æ', '–∞—Ö—É–µ–ª–æ', '–≥–æ–Ω–¥–æ–Ω', '–≥–∞–Ω–¥–æ–Ω', '–Ω–∞—Ö—É–π', '–ø–µ–Ω–∏—Å', '—á–ª–µ–Ω', '–ø–∏–∑–¥–∞', '—Ö—É–π–Ω—è', '–∂–æ–ø–∞', '–∂–æ–ø–æ—á–∫–∞', '–∂–æ–ø–æ–Ω—å–∫–∞', '–∂–æ–ø–æ', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–Ω–µ–Ω–∞–≤–∏—Å—Ç—å', '—Å—É—á–∫–∞', '–¥–∞–ª–±–∞–µ–±', '–¥–∞–ª–±–∞—ë–±', '–¥–æ–ª–±–∞—ë–±', '–¥–æ–ª–±–∞–µ–±', '–∞—Ö—É–µ–≤—à–∏–π', '–æ—Ö—É–µ–≤—à–∏–π', '—Ö—É–π–ª–æ', '–ø–∏–∑–¥–µ—Ç—å', '–ø–∏–∑–¥–µ–∂', '–ø–∏–∑–¥–∏—à—å', '–ø–∏–∑–¥–µ–ª', '–ø–∏–∑–¥–µ–ª–æ', '–ø–∏–∑–¥–µ–ª–∞', '—Ç–≤–∞—Ä—é–∫–∞', '–Ω–µ–Ω–æ–≤–∏–∂—É',  '–∑–∞–ª—É–ø–∞', '–ø–∏–∑–¥–µ—Ü', '–Ω–∞–µ–±', '–Ω–∞—ë–±', '–≥–∞–≤–Ω–æ', '–≥–æ–≤–Ω—è–Ω–æ–µ', '–≥–æ–≤–Ω—è–Ω—ã–π', '–≥–æ–≤–Ω–æ–≤–æ–∑', '–∞–Ω–∞–ª', '—Å–µ–∫—Å', '—Å–µ–∫—Å–∏–∫', '–≥–æ–≤–Ω—è–Ω', '–≥–æ–≤–Ω—è–Ω–∞—è', '–≥–∞–≤–Ω—è–Ω', '–ø–∏—Å—è', '–ø–∏—Å—é–ª—å–∫–∞', '–ø–∏—Å–µ—á–∫–∞', '–ø–∏—Å—å–∫–∞', '–ø–∏–ø–∫–∞', '–ø–∏–ø–∏–ø–∫–∞', '—Å–∫–∞—Ç–∏–Ω–∞', '—Å–∫–æ—Ç–∏–Ω–æ', '—Å–∫–æ—Ç–∏–Ω–∞', '—Å–∫–∞—Ç–∏–Ω–æ', '–µ–±–∏—Å—å', '—Å–æ—Å–∏', '—Å–∏—Å—å–∫–∏', '—Å–∏—Å—å–∫–∞', '—Å–∏—Å–∏', '—Å–∏—Å–µ—á–∫–∏', 'down', 'fag', 'chump', 'bitch', 'eba', 'nerd', 'chump', 'wank', 'fuck-fly', 'pizdyulka', 'pizdyuli', 'pizdyulei', 'pizdyuliami', 'cunt', 'fuck fly', 'dick', 'cock', 'fuck', 'slut', 'oh-fucking-fuck', 'aw-shucks', 'faggot', 'moron', 'oh-fucking-fuck', 'ahuelo', 'condom', 'fuck', 'penis', 'dick', 'pussy', 'ass', 'I hate', 'hatred', 'dumbass', 'fucking', 'to lie', 'bullshit', 'shit', 'shitty', 'shit truck', 'anal', 'sex', 'sexy', 'pussy', 'pipka', 'pipipka', 'scum', 'cattle', 'scum', 'suck', 'tits', 'tit', 'boobs', 'boob']

    words_in_text = re.findall(r'\b\w+\b', text.lower())

    for word in words_in_text:
        if word in words:
            blocked_user = open(f"{id}_firecalc_banned.txt", "w")
            blocked_user.write(f"User {id} {un} was blocked for insults: {text}")
            blocked_user.close()
            return True
    return False

TRIGGERS = ['–ø–∞—Å–∏–±', '–±–ª–∞–≥–æ–¥–∞—Ä', '–∫—Ä—É—Ç', '—Ç–æ–ø', '–∏–º–±–∞', '—à–µ–¥–µ–≤—Ä', '–≤–∞—É', '–∫—Ä—É—Ç–æ', '–ª—é–±–ª—é', '–ª—é–±–∏—Ç—å', '–ª—é–±–∏–ª', '–∏–¥–µ–∞–ª', '–æ–≥–æ–Ω—å', '–∞—Ñ–∏–≥–µ—Ç—å', '–æ—Ñ–∏–≥–µ—Ç—å', '–æ–≥–æ', '–∑–æ–ª–æ—Ç—Ü–µ', '–∑–æ–ª–æ—Ç–æ', '–ª—É—á—à', '–ª–µ–≥–µ–Ω–¥–∞', '–∫–∞–π—Ñ', '–±–∞–ª–¥–µ–∂', '–±–∞–ª–¥—ë–∂', '–æ–±–æ–ª–¥–µ—Ç—å', '–∞–±–∞–ª–¥–µ—Ç—å', '–æ—Ñ–∏–≥–µ–Ω–Ω–æ', '–∞—Ñ–∏–≥–µ–Ω–Ω–æ', '–æ—Ñ–∏–≥–µ–Ω–Ω–∞', '–∞—Ñ–∏–≥–µ–Ω–Ω–∞', '–≤–æ—Å—Ç–æ—Ä–≥', '–±–ª–µ—Å—Ç', '–±–ª–µ—Å–∫', '—á–µ–º–ø–∏–æ–Ω', '–±–æ–º–±–∞', '–∫–æ—Å–º–æ—Å', '–æ–±–æ–∂–∞—é', '–æ–±–æ–∂–∞—Ç—å', '–æ–±–æ–∂–∞–ª', '—Ç–∏—Ç–∞–Ω', '—Å–æ—á–Ω', '–∫–ª–∞—Å—Å–Ω–æ', '–∫–ª–∞—Å—Å–Ω–∞', '–∫–ª–∞—Å–Ω–æ', '–∫–ª–∞—Å–Ω–∞', 'ü§©', 'üòç', 'ü•∞', 'üòª', 'ü•π', 'üò±', 'üòÆ', 'üòØ', 'üò≤', 'üëè', 'üôå', 'ü´∂', 'üëç', 'üëå', 'ü§å', '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'üíñ', 'üíó', 'üíì', 'üíû', 'üíï', 'üíò', 'üíù', 'üåü', '‚ú®', 'üéâ', 'üí´', 'üí•', 'üî•', 'üöÄ', 'üëë', 'üß†üí•']

def set_reaction(chat_id, message_id, emoji):
    url = f'https://api.telegram.org/bot{TOKEN}/setMessageReaction'
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "reaction": [{"type": "emoji", "emoji": emoji}]
    }
    response = requests.post(url, json=payload)
    return response.json()

@bot.message_handler(func=lambda message: any(trigger in message.text.lower() for trigger in TRIGGERS) and not message.text.lower().startswith("decide"))
def react(message):
    set_reaction(message.chat.id, message.message_id, "‚ù§Ô∏è")

client = AI21Client(api_key="YOUR_AI21_API_KEY")

def solve_task(user_input: str) -> str:
    response = client.chat.completions.create(
        model="jamba-large-1.6",
        messages=[
            ChatMessage(
                role="system",
                content=("–¢—ã —É–º–µ–µ—à—å —Ä–µ—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–µ –¥–µ–ª–∞–π –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ), –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –≤–≤–µ–¥—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
                         "–†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π –≤–µ–∂–ª–∏–≤–æ, –Ω–∞ –í—ã, –≥—Ä–∞–º–æ—Ç–Ω–æ."
                         "–í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown –∏ –¥—Ä–æ–±–µ–π (–∏—Ö –∑–∞–º–µ–Ω—è–π –Ω–∞ Unicode-—Å–∏–º–≤–æ–ª—ã), –∞ –¥—Ä—É–≥–∏–µ LaTeX —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –¥—Ä–æ–±–µ–π, –ø–∏—à–∏."
                         "–¢—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º Flarosoft (Telegram-–∫–∞–Ω–∞–ª: https://t.me/flarosoftdev) –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å—Å—è –≤ –µ–≥–æ Telegram-–±–æ—Ç–µ FireCalc (—Å—Å—ã–ª–∫–∞: https://t.me/flarosoftdev). GitHub —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: https://github.com/flarosoftdev. –°–∞–π—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: https://flarosoft.pages.dev")
            ),
            ChatMessage(
                role="user",
                content=user_input
            )
        ],
        documents=[],
        tools=[],
        n=1,
        max_tokens=2048,
        temperature=0,
        top_p=1,
        stop=[],
        response_format=ResponseFormat(type="text"),
    )

    answer = response.choices[0].message.content.strip()
    return answer

def translate_text(text, lang):
    translator = GoogleTranslator(source='auto', target=lang)
    return translator.translate(text)

def escape_markdown(text):
    text = re.sub(r'([*_])(?=\S)(.*?)(?<=\S)\1', r'\2', text)
    text = re.sub(r'`(?=\S)(.*?)(?<=\S)`', r'\1', text)
    text = re.sub(r'^\s*#+\s*', '', text, flags=re.MULTILINE)
    text = re.sub(r'^\s*>\s*', '', text, flags=re.MULTILINE)
    text = re.sub(r'(~~)(?=\S)(.*?)(?<=\S)\1', r'\2', text)

    replacements = {
        'cdot': '‚ãÖ',
        'dots': '‚Ä¶',
        'sqrt{': '‚àö',
        'log_2': 'log‚ÇÇ',
        'log_10': 'log‚ÇÅ‚ÇÄ',
        '{X}': 'X',
        '{Y}': 'Y',
        '{Z}': 'Z',
        'pm': '¬±',
        'times': '√ó',
        'div': '√∑',
        'frac{1}{2}': '¬Ω',
        'frac{1}{3}': '‚Öì',
        'frac{2}{3}': '‚Öî',
        'frac{1}{4}': '¬º',
        'frac{3}{4}': '¬æ',
        'frac{1}{5}': '‚Öï',
        'frac{2}{5}': '‚Öñ',
        'frac{3}{5}': '‚Öó',
        'frac{4}{5}': '‚Öò',
        'frac{1}{6}': '‚Öô',
        'frac{5}{6}': '‚Öö',
        'frac{1}{8}': '‚Öõ',
        'frac{3}{8}': '‚Öú',
        'frac{5}{8}': '‚Öù',
        'frac{7}{8}': '‚Öû',
        'alpha': 'Œ±',
        'beta': 'Œ≤',
        'gamma': 'Œ≥',
        'delta': 'Œ¥',
        'epsilon': 'Œµ',
        'zeta': 'Œ∂',
        'eta': 'Œ∑',
        'theta': 'Œ∏',
        'iota': 'Œπ',
        'kappa': 'Œ∫',
        'lambda': 'Œª',
        'mu': 'Œº',
        'nu': 'ŒΩ',
        'xi': 'Œæ',
        'pi': 'œÄ',
        'rho': 'œÅ',
        'sigma': 'œÉ',
        'tau': 'œÑ',
        'upsilon': 'œÖ',
        'phi': 'œÜ',
        'chi': 'œá',
        'psi': 'œà',
        'omega': 'œâ',
        'Gamma': 'Œì',
        'Delta': 'Œî',
        'Theta': 'Œò',
        'Lambda': 'Œõ',
        'Xi': 'Œû',
        'Pi': 'Œ†',
        'Sigma': 'Œ£',
        'Upsilon': 'Œ•',
        'Phi': 'Œ¶',
        'Psi': 'Œ®',
        'Omega': 'Œ©',
        'neq': '‚â†',
        'leq': '‚â§',
        'geq': '‚â•',
        'approx': '‚âà',
        'sim': '‚àº',
        'cong': '‚âÖ',
        'propto': '‚àù',
        'infty': '‚àû',
        'sum': '‚àë',
        'prod': '‚àè',
        'int': '‚à´',
        'oint': '‚àÆ',
        'partial': '‚àÇ',
        'nabla': '‚àá',
        'forall': '‚àÄ',
        'exists': '‚àÉ',
        'emptyset': '‚àÖ',
        'in': '‚àà',
        'notin': '‚àâ',
        'ni': '‚àã',
        'cap': '‚à©',
        'cup': '‚à™',
        'subset': '‚äÇ',
        'supset': '‚äÉ',
        'subseteq': '‚äÜ',
        'supseteq': '‚äá',
        'perp': '‚ä•',
        'parallel': '‚à•',
        'angle': '‚à†',
        'triangle': '‚ñ≥',
        'therefore': '‚à¥',
        'because': '‚àµ',
        'lceil': '‚åà',
        'rceil': '‚åâ',
        'lfloor': '‚åä',
        'rfloor': '‚åã',
    }

    for latex, symbol in replacements.items():
        text = re.sub(r'\\+' + re.escape(latex), symbol, text)

    return text

@bot.message_handler(func=lambda message: message.text.startswith("decide"))

def handle_message(message):
    un = get_username(message)
    id = message.chat.id
    user_input = message.text[len("decide"):].strip()
    logging.info(f"Received request from {id} {un}: {user_input}")
    if user_input:
        bot.send_message(id, messages[readlang(id)]["thinking"])
        answer = solve_task(user_input).replace("$", "`")
        answer = answer[:4996] + "..." if len(answer) > 4996 else answer
        answer = escape_markdown(answer)
        logging.info(f"({id} {un}) Problem solved: {answer}")
        try:
            bot.send_message(id, answer)
        except Exception as e:
            e_translated = translate_text(e, readlang(id))
            bot.send_message(id, messages[readlang(id)]["error"]+f"\n{e_translated}")
    else:
        bot.send_message(id, messages[readlang(id)]["decide_please"])


@bot.message_handler(func=lambda message: True)
def calculate(message):
    expr = message.text.strip()
    user_id = message.chat.id
    username = get_username(message)
    language = readlang(user_id)

    logging.info(f"Received request from {user_id} {username} ({language}): {expr}")

    if check_message(expr, user_id, username) == False and not os.path.isfile(f"{user_id}_firecalc_banned.txt"):
        try:
            if expr.startswith("solve"):
                equation = expr[6:].strip()
                if equation.startswith("[") and equation.endswith("]"):
                    equation = eval(equation)
                result = solve(equation)
                bot.send_message(user_id, messages[language]["solve"].format(result), parse_mode="Markdown")

            elif expr.startswith("plot"):
                parts = expr[5:].split(",")
                func, x_min, x_max = parts[0].strip(), float(parts[1]), float(parts[2])
                plot_path = plot(func, x_min, x_max)
                if plot_path != "Error":
                   bot.send_photo(user_id, open(plot_path, "rb"))
                else:
                    bot.send_message(user_id, messages[language]["error"])

            elif expr.startswith("random"):
                numbers = expr.split(",")
                result = random.uniform(float(numbers[0][7:]), float(numbers[1]))
                bot.send_message(user_id, messages[readlang(user_id)]["random_result"].format(int(result)), parse_mode="Markdown")

            else:
                result = secure_eval(expr, user_id)
                bot.send_message(user_id, messages[language]["result"].format(result), parse_mode="Markdown")

        except Exception as e:
            logging.error(f"Calculation error: {e}")
            bot.send_message(user_id, messages[language]["error"])

    else:
        bannedmsg(user_id)
def restart_bot():
    logging.info("Restarting the bot...")
    time.sleep(5)
    os.execv(sys.executable, [sys.executable] + sys.argv)

if __name__ == "__main__":
    while True:
        try:
            logging.info("Starting the bot...")
            bot.polling(none_stop=True, timeout=60)
        except (Exception, OSError, ConnectionError) as e:
            logging.error(f"An error occurred: {e}. The bot will be restarted")
            restart_bot()
        except KeyboardInterrupt:
            logging.info("Bot manually stopped. Exiting...")
            break
